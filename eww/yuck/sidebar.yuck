;; SIDEBAR

(defvar top-height "0")
(defvar end-height "0")
(defvar time-height "140")
(defvar cava-height "136")
(defvar player-height "140")
(defvar settings-height "220")
(defvar stats-height "150")
(defvar sys-height "120")

(defwidget time []
	(box :class "roundpannel time" :height time-height :valign "end"
	(box :orientation "v" :space-evenly "false" :vexpand "true" :valign "center"
		(label :text time :class "label-time")
		(label :text date :class "label-date")
)))

(defwidget cava []
	(box :height cava-height :orientation "v" :space-evenly "false"
		(box :height cava-height :orientation 'h' :halign 'center'
		(box :class 'vis' :orientation 'h' :space-evenly 'true' :width '320' :vexpand 'true'
			(scale :orientation 'v' :value l1 :flipped 'true')
			(scale :orientation 'v' :value l2 :flipped 'true')
			(scale :orientation 'v' :value l3 :flipped 'true')
			(scale :orientation 'v' :value l4 :flipped 'true')
			(scale :orientation 'v' :value l5 :flipped 'true')
			(scale :orientation 'v' :value l6 :flipped 'true')
			(scale :orientation 'v' :value l7 :flipped 'true')
			(scale :orientation 'v' :value l8 :flipped 'true')
			(scale :orientation 'v' :value l9 :flipped 'true')
			(scale :orientation 'v' :value l10 :flipped 'true')
			(scale :orientation 'v' :value l11 :flipped 'true')
			(scale :orientation 'v' :value l12 :flipped 'true')
		))
		;; (literal :content vis)
))

(defwidget player []
	(box :class "roundpannel player ${title == "" ? "disabled" : ""}" :height player-height
	(box :orientation "v" :space-evenly "false" :vexpand "true" :valign "center"
		(label :class "label-title" :text "${title != "" ? "${title}" : "Offline"}" :halign "middle" :limit-width "20" )
		(label :class "label-artist" :text "${artist != "" ? "${artist}" : ""}" :halign "middle" :limit-width "30")
		(literal :content "${title == "" ?
			"(box :class 'labels' :orientation 'h' :spacing 20 :halign 'center' :space-evenly 'true'
				(button '玲')
				(button :class 'btn-play' play-icon)
				(button '怜'))" :
			"(box :class 'labels' :orientation 'h' :spacing 20 :halign 'center' :space-evenly 'true'
				(button :onclick 'playerctl -p playerctld previous' '玲')
				(button :class 'btn-play' :onclick 'scripts/player action' play-icon)
				(button :onclick 'playerctl -p playerctld next' '怜'))"}")
)))

(defvar vol-literal "
	(slider
		:value volume-val
		:icon vol-icon
		:tooltip 'Volume: \${volume-val}%
\${vol-tooltip}'
		:action-click '~/.config/i3/scripts/fnactions mute'
		:action-slide 'amixer -D pulse sset Master {}%'
		:modi mute-bool)
")
(defwidget settings []
	(box :class "settings roundpannel" :space-evenly "true" :orientation "v" :height settings-height
		(literal :content vol-literal)
		(slider
			:value light-val
			:icon light-icon
			:tooltip "Brightness: ${light-val}%"
			:action-click "brightnessctl s 0"
			:action-slide ""
			:modi "")
		(slider
			:value batt-val
			:icon batt-icon
			:tooltip "Battery: ${batt-val}%
${batt-tooltip}"
			:action-click ""
			:action-slide ""
			:modi "${(batt-val <= 15) ? "critical" : ""}")
))

(defwidget weather []
	(box :class "roundpannel weather" :space-evenly "true" :orientation "h" :width "190" :height settings-height
	(box :space-evenly "false" :orientation "v"
		(box :space-evenly "false" :orientation "v"
			(label :text weather-loc  :valign "start" :halign "start" :class "bold")
			(label :text weather-cond :valign "start" :halign "start" :xalign "0" :wrap "true" :limit-width "26")
			(label :class "label-weather" :text weather-temp :valign "start" :halign "start"))
		(box :class "weatherpannel" :space-evenly "false" :orientation "h" :halign "end" :valign "end" :vexpand "true"
			(button :tooltip "Current Weather: ${weather-cond}, ${weather-temp}" :onclick "" weather-icon) 
		))
))

(defwidget ram []
	(radialmeter	
		:value "${ram-val}"
		:text " RAM"
		:label "${ram-val}G"
		:tooltip ""))
(defwidget cpu []
	(radialmeter	
		:value "${cpu-val}"
		:text " CPU"
		:label "${cpu-val}%"
		:tooltip ""))
(defwidget hdd []
	(radialmeter	
		:value	"${hdd-val}"
		:text " HDD"
		:label "${hdd-val}%"
		:tooltip "${hdd-used}M used, ${hdd-avail}M available"))

(defwidget quickbuttons []
	(box :class "roundpannel" :height sys-height
	(box :orientation "h" :space-evenly "true" :vexpand "true" :valign "center"
		(quickbutton :icon "直" :tooltip "" :action "scripts/quickbutton wifi" 		:type "wifi")
		(quickbutton :icon ""  :tooltip "" :action "scripts/quickbutton bluetooth" :type "bluetooth")
		(quickbutton :icon "ﮖ"  :tooltip "Do Not Disturb" :action "scripts/quickbutton notif" 	:type "notif")
		(quickbutton :icon ""  :tooltip "Lock"  :action "scripts/quickbutton lock"  :type "")
		(quickbutton :icon ""  :tooltip "Sleep" :action "scripts/quickbutton sleep" :type "")
)))

(defwidget pannel []
	 (box :class "sidepannel" :orientation "v" :space-evenly "false"
	 	 ;; (box :class "container" :height top-height)
		 (box :class "container time" :orientation "v" :space-evenly "false"
			(time))
		 (box :class "container cava" :orientation "v" :space-evenly "false"
		 	(cava))
		 (box :class "container" :orientation "v" :space-evenly "false"
			(player)
			 (box :orientation "h" :space-evenly "false"
				 (settings)
				 (weather))
			 (box :class "roundpannel" :orientation "h" :space-evenly "true" :height stats-height
			 (box :orientation "h" :space-evenly "true" :vexpand "true" :valign "center"
				 (cpu)
				 (ram)
				 (hdd)))
			 (quickbuttons))
	 	 ;; (box :class "container" :height end-height)
))

(defwindow sidebar
	:monitor 0
	:windowtype "toolbar"
	:geometry (geometry :x "0"
						:y "6%"
						:width "450px"
						:height "0")
	:wm-ignore true
	:stacking "fg"
	(pannel))
