;; SIDEBAR MENU

(defvar cava-height "110")
(defvar player-height "130")
(defvar controls-height "170")

;; Individual widgets
(defwidget datetime []
	(box :class "roundpanel datetime" :valign "end"
	(box :orientation "v" :space-evenly "false" :vexpand "true" :valign "center"
		(label :text {formattime(EWW_TIME, '%H:%M')} :class "time")
		(label :text {formattime(EWW_TIME, '%a, %d %b %Y')} :class "date")
)))

(defwidget cava []
	(box :orientation "v" :space-evenly "false"
		(box :height cava-height :orientation 'h' :halign 'center'
		(box :class 'cava' :orientation 'h' :space-evenly 'true' :width '320' :vexpand 'true'
			(scale :orientation 'v' :value {cava[0]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[1]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[2]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[3]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[4]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[5]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[6]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[7]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[8]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[9]}  :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[10]} :active 'false' :flipped 'true')
			(scale :orientation 'v' :value {cava[11]} :active 'false' :flipped 'true')
		))
))

(defwidget player []
	(box :class "roundpanel player ${title == "" ? "disabled" : ""}" :height player-height
	(box :orientation "v" :space-evenly "false" :vexpand "true" :valign "center"
		(label :class "player-title" :text "${title != "" ? "${title}" : "Offline"}" :halign "middle" :limit-width "36" )
		(label :class "player-artist" :text "${artist != "" ? "${artist}" : "~~"}" :halign "middle" :limit-width "30")
		(literal :content "${title == "" ?
			"(box :class 'player-controls' :orientation 'h' :spacing 20 :halign 'center' :space-evenly 'true'
				(button '玲')
				(button :class 'btn-play' play-icon)
				(button '怜'))" :
			"(box :class 'player-controls' :orientation 'h' :spacing 20 :halign 'center' :space-evenly 'true'
				(button :onclick 'playerctl -p playerctld previous' '玲')
				(button :class 'btn-play' :onclick 'scripts/player action' play-icon)
				(button :onclick 'playerctl -p playerctld next' '怜'))"}")
)))

(defwidget sidebar-controls []
	(box :class "controls roundpanel" :space-evenly "true" :orientation "v" :height controls-height
		(slider
			:value vol-val
			:icon vol-icon
			:tooltip "Volume: ${vol-val}%
${vol-tooltip}" :hover "vol"
			:action-click "~/.config/i3/scripts/fnactions mute"
			:action-slide "amixer -D pulse sset Master {}%"
			:modi mute-bool)
		(slider
			:value light-val
			:icon light-icon
			:tooltip "Brightness: ${light-val}%" :hover "light"
			:action-click "brightnessctl s 0 && ${EWW_CMD} update light-val=$(${EWW_CONFIG_DIR}/scripts/getval light)"
			:action-slide "brightnessctl s {}% && ${EWW_CMD} update light-icon=$(${EWW_CONFIG_DIR}/scripts/geticon light)"
			:modi "")
		(slider
			:value {batt-val}
			:icon batt-icon
			:tooltip "Battery: ${batt-val}%
${batt-tooltip}" :hover "batt"
			:action-click ""
			:action-slide ""
			:modi {batt-val <= 15 ? "critical" : ""})
))

(defwidget weather []
	(box :class "roundpanel weather" :space-evenly "true" :orientation "h" :width 190 :height controls-height
	(box :space-evenly "false" :orientation "v"
		(overlay :height controls-height
		(box :space-evenly "false" :orientation "v"
			(label :text weather-loc  :valign "start" :halign "start")
			(label :text weather-cond-short :valign "start" :halign "start" :class "weather-cond")
			(label :class "weather-temp" :text weather-temp :valign "start" :halign "start"))
		(box :space-evenly "false" :orientation "h" :halign "end" :valign "end" :vexpand "true"
			(button :class "weather-icon" :tooltip "Current Weather: ${weather-cond}, ${weather-temp}" :onclick "" 
				(image :path weather-icon)
			))
))))

(defwidget stats []
	(box :class "roundpanel stats" :orientation "h" :space-evenly "true" :vexpand "true" :valign "center"
		(cpu)
		(ram)
		(hdd)))
(defwidget ram []
	(radialmeter	
		:value {EWW_RAM.used_mem_perc}
		:text " RAM"
		:label "${round(EWW_RAM.used_mem/1000000000,2)}G"
		:tooltip "${round(EWW_RAM.used_mem/1000000000,2)}G used"))
(defwidget cpu []
	(radialmeter	
		:value "${EWW_CPU.avg}"
		:text " CPU"
		:label "${round(EWW_CPU.avg,1)}%"
		:tooltip ""))
(defwidget hdd []
	(radialmeter	
		:value {EWW_DISK["/"].used_perc}
		:text " HDD"
		:label "${round(EWW_DISK['/'].used_perc,1)}%"
		:tooltip "${round(EWW_DISK['/'].used/1000000000,1)}G used, ${round(EWW_DISK['/'].free/1000000000,1)}G available"))

(defwidget quickbuttons []
	(box :class "roundpanel quickbuttons"
	(box :orientation "h" :space-evenly "true" :vexpand "true" :valign "center"
		(quickbtn :icon "直"
			:action "scripts/quickbutton wifi"
			:tooltip wifi-tooltip 
			:toggle wifi-bool)
		(quickbtn :icon ""
			:action "scripts/quickbutton bluetooth"
			:tooltip ""
			:toggle bluetooth-bool)
		(quickbtn :icon "ﮖ"
			:action "scripts/quickbutton notif"
			:tooltip "Do Not Disturb" :toggle notif-bool)
		(quickbtn :icon "零"
			:action "scripts/quickbutton timeout"
			:tooltip "Disable Screen Timeout" :toggle timeout-bool)
		(quickbtn :icon "" :tooltip "Lock"  :action "scripts/quickbutton lock" :toggle "")
		;; (quickbtn :icon "" :tooltip "Sleep" :action "scripts/quickbutton sleep" :toggle "")
)))

;; Combined layout
(defwidget sidebar []
	(box :orientation "h" :space-evenly "false" :class "hidden" :width 600
		(revealer :transition "slideright" :duration ".3s" :reveal reveal-sidebar
		(box :class "sidepanel" :orientation "v" :space-evenly "false"
			(box :class "container first" (datetime))
			(box :class "container" (cava))
			(box :class "container" (player))
			(box :class "container" :orientation "h" :space-evenly "false"
				(sidebar-controls)
				(weather))
			(box :class "container" (stats))
			(box :class "container last" (quickbuttons)))
)))
(defvar reveal-sidebar false)

;; Window
(defwindow sidebar
	:monitor 0
	:windowtype "toolbar"
	:geometry (geometry :x "0"
						:y "9%")
	:wm-ignore true
	:stacking "fg"
	(sidebar))
